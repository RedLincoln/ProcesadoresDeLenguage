L 8:
		R6=R7;		 # Nuevo marco
		R7=R7-0;		 # Reservamos espacio para variables locales
		R0 = 0; 		# Guardamos valor de constante numerica
		R0 = R0 * 4;		 # multiplicamos indice por bytes del tipo
		R1 = R6+16; 		 # Almacenamos dirección relativa de acceso de array
		R0 = R1+R0;
		R0 = P(R0);
		R1 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R2 = I(R6+12);		 # Copiamos valor en memoria relativa a registro;
		R1 = R1+R2;		 # Operaciones numericas
		I(R0) = R1;		 # Guardamos valor de registro en memoria
		R7=R6;		 # Liberamos memoria local
		R6=P(R7+4);		 # Recuperamos marco
		R0 = P(R7);		 # Recuperamos etiqueta de retorno
		GT(R0);
L 9:
		R6=R7;		 # Nuevo marco
		R7=R7-8;		 # Reservamos espacio para variables locales
		R0 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R1 = 0; 		# Guardamos valor de constante numerica
		R0 = R0 != R1;		 # Operaciones logicas
		IF (R0) GT(10);		 # condición revertida
		R1 = 0; 		# Guardamos valor de constante numerica
		R1 = R1 * 4;		 # multiplicamos indice por bytes del tipo
		R2 = R6+12; 		 # Almacenamos dirección relativa de acceso de array
		R1 = R2+R1;
		R1 = P(R1);
		R2 = 0; 		# Guardamos valor de constante numerica
		I(R1) = R2;		 # Guardamos valor de registro en memoria
L 10:
		R0 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R1 = 1; 		# Guardamos valor de constante numerica
		R0 = R0 != R1;		 # Operaciones logicas
		IF (R0) GT(11);		 # condición revertida
		R1 = 0; 		# Guardamos valor de constante numerica
		R1 = R1 * 4;		 # multiplicamos indice por bytes del tipo
		R2 = R6+12; 		 # Almacenamos dirección relativa de acceso de array
		R1 = R2+R1;
		R1 = P(R1);
		R2 = 1; 		# Guardamos valor de constante numerica
		I(R1) = R2;		 # Guardamos valor de registro en memoria
L 11:
		R0 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R1 = 1; 		# Guardamos valor de constante numerica
		R0 = R0 <= R1;		 # Operaciones logicas
		IF (R0) GT(12);		 # condición revertida
		R7 = R7 - 0;		 # Reservamos memoria para cambio de contexto
		R0 = R6-4;		 # Almacenamos dirección relativo de acceso de array
		R7 = R7-4;
		I(R7) = R0;		 # Guardamos valor de registro en memoria
		R0 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R1 = 1; 		# Guardamos valor de constante numerica
		R0 = R0-R1;		 # Operaciones numericas
		R7 = R7-4;
		I(R7) = R0;		 # Guardamos valor de registro en memoria
		R7 = R7-8;
		P(R7+4) = R6;		 # Salvamos marco actual
		P(R7) = 13;		 # Almacenamos etiqueta de retorno
		GT(9);
L 13:
		R7 = R7+16;
		R7 = R7 + 0;		 # Volvemos al estado anterior al cambio de contexto
		R7 = R7 - 0;		 # Reservamos memoria para cambio de contexto
		R0 = R6-8;		 # Almacenamos dirección relativo de acceso de array
		R7 = R7-4;
		I(R7) = R0;		 # Guardamos valor de registro en memoria
		R0 = I(R6+8);		 # Copiamos valor en memoria relativa a registro;
		R1 = 2; 		# Guardamos valor de constante numerica
		R0 = R0-R1;		 # Operaciones numericas
		R7 = R7-4;
		I(R7) = R0;		 # Guardamos valor de registro en memoria
		R7 = R7-8;
		P(R7+4) = R6;		 # Salvamos marco actual
		P(R7) = 14;		 # Almacenamos etiqueta de retorno
		GT(9);
L 14:
		R7 = R7+16;
		R7 = R7 + 0;		 # Volvemos al estado anterior al cambio de contexto
		R0 = 0; 		# Guardamos valor de constante numerica
		R0 = R0 * 4;		 # multiplicamos indice por bytes del tipo
		R1 = R6+12; 		 # Almacenamos dirección relativa de acceso de array
		R0 = R1+R0;
		R0 = P(R0);
		R1 = 0; 		# Guardamos valor de constante numerica
		R1 = R1 * 4;		 # multiplicamos indice por bytes del tipo
		R2 = R6-4; 		 # Almacenamos dirección relativa de acceso de array
		R1 = R2+R1;
		R1 = I(R1);		 # Almacenamos valor de array (addr. relativo)
		R2 = 0; 		# Guardamos valor de constante numerica
		R2 = R2 * 4;		 # multiplicamos indice por bytes del tipo
		R3 = R6-8; 		 # Almacenamos dirección relativa de acceso de array
		R2 = R3+R2;
		R2 = I(R2);		 # Almacenamos valor de array (addr. relativo)
		R1 = R1+R2;		 # Operaciones numericas
		I(R0) = R1;		 # Guardamos valor de registro en memoria
L 12:
		R7=R6;		 # Liberamos memoria local
		R6=P(R7+4);		 # Recuperamos marco
		R0 = P(R7);		 # Recuperamos etiqueta de retorno
		GT(R0);
